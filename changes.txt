diff --git a/.flaskenv b/.flaskenv
index 5df451d..7d02be3 100644
--- a/.flaskenv
+++ b/.flaskenv
@@ -4,4 +4,4 @@ FLASK_ENV=development
 MAIL_SERVER='us2.smtp.mailhostbox.com'
 MAIL_PORT=587
 MAIL_USE_TLS=1
-DATABASE_URL='sqlite:///test.db'
\ No newline at end of file
+DATABASE_URL='sqlite:///test.db'
--- a/models/__init__.py
+++ b/models/__init__.py
@@ -4,3 +4,5 @@ from .patient import Patient
 from .department import Department
 from .appointments import Appointment
 from .timeslot import TimeSlot
+from .working_hours import WorkingHours
+from .appointments import AppointmentStatus
diff --git a/models/base_model.py b/models/base_model.py
index 02cab97..172ec07 100644
--- a/models/base_model.py
+++ b/models/base_model.py
@@ -24,7 +24,8 @@ class BaseModel(db.Model):

     __abstract__ = True
     id: so.Mapped[str] = so.mapped_column(
-        sa.String(128), primary_key=True, default=lambda: str(uuid.uuid4()),
+        sa.String(128), primary_key=True,
+        default=lambda: str(uuid.uuid4()),
         index=True
     )
     created_at: so.Mapped[sa.DateTime] = so.mapped_column(
diff --git a/models/department.py b/models/department.py
index 3f4d39d..ed2ee96 100644
--- a/models/department.py
+++ b/models/department.py
@@ -7,8 +7,7 @@ import sqlalchemy.orm as so

 class Department(BaseModel):
     __tablename__ = "departments"
-    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True,
-                                            nullable=False)
+    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True, nullable=False)
     description: so.Mapped[str] = so.mapped_column(sa.String(256))
     doctors: so.Mapped[List["m.Doctor"]] = so.relationship(
         "Doctor", back_populates="department"
diff --git a/models/doctor.py b/models/doctor.py
index 8d434e2..145bd3a 100644
--- a/models/doctor.py
+++ b/models/doctor.py
@@ -25,25 +25,21 @@ class Doctor(BaseModel, PasswordMixin):
         super().__init__(**kwargs)

     __tablename__ = "doctors"
-    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True,
-                                            nullable=False)
+    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True, nullable=False)
     email: so.Mapped[str] = so.mapped_column(
         sa.String(120), index=True, unique=True, nullable=False
     )
-    certificates: so.Mapped[str] = so.mapped_column(sa.String(256),
-                                                    nullable=False)
+    certificates: so.Mapped[str] = so.mapped_column(sa.String(256), nullable=False)

     phone: so.Mapped[Optional[str]] = so.mapped_column(
         sa.String(10), index=True, unique=True
     )

     department_id: so.Mapped[str] = so.mapped_column(
-        sa.ForeignKey("departments.id"), index=True,
-        nullable=False
+        sa.ForeignKey("departments.id"), index=True, nullable=False
     )

-    password_hash: so.Mapped[str] = so.mapped_column(sa.String(256),
-                                                     nullable=False)
+    password_hash: so.Mapped[str] = so.mapped_column(sa.String(256), nullable=False)

     department: so.Mapped["m.Department"] = so.relationship(
         "Department", back_populates="doctors"
@@ -57,3 +53,9 @@ class Doctor(BaseModel, PasswordMixin):
     last_seen: so.Mapped[Optional[sa.DateTime]] = so.mapped_column(
         sa.DateTime, default=gen_datetime
     )
+
+    working_hours: so.Mapped[List["m.WorkingHours"]] = so.relationship(
+        "WorkingHours", back_populates="doctor"
+    )
+
+    is_active: so.Mapped[sa.Boolean] = so.mapped_column(sa.Boolean, default=True)
diff --git a/models/patient.py b/models/patient.py
index 1ddb1a4..326f6b9 100644
--- a/models/patient.py
+++ b/models/patient.py
@@ -8,6 +8,8 @@ from utils import PasswordMixin
 from flask_login import UserMixin
 import jwt
 from web_flask import app, db
+from sqlalchemy.ext.hybrid import hybrid_property
+from datetime import date


 class Patient(BaseModel, PasswordMixin, UserMixin):
@@ -16,6 +18,7 @@ class Patient(BaseModel, PasswordMixin, UserMixin):
     Args:
         BaseModel (): Base model class
     """
+
     def __init__(self, password: str, **kwargs):
         """
         Constructor for the Patient class
@@ -28,22 +31,23 @@ class Patient(BaseModel, PasswordMixin, UserMixin):

     def get_reset_password_token(self, expires_in=600):
         return jwt.encode(
-            {'reset_password': self.id, 'exp': time() + expires_in},
-            app.config['SECRET_KEY'], algorithm='HS256'
+            {"reset_password": self.id, "exp": time() + expires_in},
+            app.config["SECRET_KEY"],
+            algorithm="HS256",
         )

     @staticmethod
     def verify_reset_password_token(token):
         try:
-            id = jwt.decode(token, app.config['SECRET_KEY'],
-                            algorithms=['HS256'])['reset_password']
+            id = jwt.decode(token, app.config["SECRET_KEY"], algorithms=["HS256"])[
+                "reset_password"
+            ]
         except Exception:
             return
         return db.session.get(Patient, id)

     __tablename__ = "patients"
-    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True,
-                                            nullable=False)
+    name: so.Mapped[str] = so.mapped_column(sa.String(64), index=True, nullable=False)
     email: so.Mapped[str] = so.mapped_column(
         sa.String(120), index=True, unique=True, nullable=False
     )
@@ -51,17 +55,14 @@ class Patient(BaseModel, PasswordMixin, UserMixin):
         sa.String(10), index=True, unique=True, nullable=False
     )

-    birth_date: so.Mapped[Optional[sa.DateTime]] = so.mapped_column(sa.DateTime, nullable=True)
+    birth_date: so.Mapped[sa.Date] = so.mapped_column(sa.Date)

-    password_hash: so.Mapped[str] = so.mapped_column(sa.String(256),
-                                                     nullable=False)
+    password_hash: so.Mapped[str] = so.mapped_column(sa.String(256), nullable=False)
     address: so.Mapped[Optional[str]] = so.mapped_column(sa.String(256))

-    medical_history: so.Mapped[Optional[str]] =\
-        so.mapped_column(sa.String(400))
+    medical_history: so.Mapped[Optional[str]] = so.mapped_column(sa.String(400))

-    current_medications: so.Mapped[Optional[str]] = \
-        so.mapped_column(sa.String(256))
+    current_medications: so.Mapped[Optional[str]] = so.mapped_column(sa.String(256))

     department_id: so.Mapped[Optional[str]] = so.mapped_column(
         sa.ForeignKey("departments.id")
@@ -76,3 +77,12 @@ class Patient(BaseModel, PasswordMixin, UserMixin):
     last_seen: so.Mapped[Optional[sa.DateTime]] = so.mapped_column(
         sa.DateTime, default=gen_datetime
     )
+
+    @hybrid_property
+    def age(self):
+        today = date.today()
+        return (
+            today.year
+            - self.birth_date.year
+            - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))
+        )
diff --git a/models/timeslot.py b/models/timeslot.py
index a845ff7..4c03e92 100644
--- a/models/timeslot.py
+++ b/models/timeslot.py
@@ -16,20 +16,19 @@ class TimeSlot(BaseModel):
         sa.UniqueConstraint(
             "doctor_id", "date", "start_time", name="doctor_date_startTime_uc"
         ),
-        sa.CheckConstraint("end_time > start_time", name="check_time_validity")
+        sa.CheckConstraint("end_time > start_time", name="check_time_validity"),
     )
     doctor_id: so.Mapped[str] = so.mapped_column(
         sa.ForeignKey("doctors.id"), index=True
     )
-    date: so.Mapped[sa.Date] = so.mapped_column(sa.Date, index=True,
-                                                nullable=False)
+    date: so.Mapped[sa.Date] = so.mapped_column(sa.Date, index=True, nullable=False)
     start_time: so.Mapped[sa.Time] = so.mapped_column(
         sa.Time, index=True, nullable=False
     )
-    end_time: so.Mapped[sa.Time] = so.mapped_column(sa.Time, index=True,
-                                                    nullable=False)
-    doctor: so.Mapped["m.Doctor"] = so.relationship("Doctor",
-                                                    back_populates="timeslots")
+    end_time: so.Mapped[sa.Time] = so.mapped_column(sa.Time, index=True, nullable=False)
+    doctor: so.Mapped["m.Doctor"] = so.relationship(
+        "Doctor", back_populates="timeslots"
+    )
     status: so.Mapped[TimeSlotStatus] = so.mapped_column(
         sa.Enum(TimeSlotStatus),
         index=True,
diff --git a/models/working_hours.py b/models/working_hours.py
new file mode 100644
index 0000000..0f2cfd2
--- /dev/null
+++ b/models/working_hours.py
@@ -0,0 +1,38 @@
+from enum import Enum
+from .base_model import BaseModel
+import models as m
+import sqlalchemy as sa
+import sqlalchemy.orm as so
+
+
+class DayOfWeek(str, Enum):
+    SUNDAY = "Sunday"
+    MONDAY = "Monday"
+    TUESDAY = "Tuesday"
+    WEDNESDAY = "Wednesday"
+    THURSDAY = "Thursday"
+    FRIDAY = "Friday"
+    SATURDAY = "Saturday"
+
+
+class WorkingHours(BaseModel):
+    __tablename__ = "working_hours"
+    __table_args__ = (
+        sa.PrimaryKeyConstraint("doctor_id", "day"),
+        sa.CheckConstraint("end_time > start_time", name="check_time_validity"),
+    )
+    id = None
+
+    doctor_id: so.Mapped[str] = so.mapped_column(
+        sa.ForeignKey("doctors.id"), index=True, nullable=False
+    )
+    start_time: so.Mapped[sa.Time] = so.mapped_column(
+        sa.Time, index=True, nullable=False
+    )
+    end_time: so.Mapped[sa.Time] = so.mapped_column(sa.Time, index=True, nullable=False)
+    doctor: so.Mapped["m.Doctor"] = so.relationship(
+        "Doctor", back_populates="working_hours"
+    )
+    day: so.Mapped[DayOfWeek] = so.mapped_column(
+        sa.Enum(DayOfWeek), index=True, nullable=False
+    )
diff --git a/requirements.txt b/requirements.txt
index 3f09637..885189c 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -19,6 +19,10 @@ pretty-errors~=1.2.15
 flask-mail~=0.9.1
 pyjwt~=2.3.0

+flask-migrate~=3.1.0
+
+flask-moment~=1.0.0
+
 # Development and Testing
 flake8>=5.0  # Consider moving to requirements-dev.txt
 python-dotenv>=1.0
\ No newline at end of file
diff --git a/utils/password_utils.py b/utils/password_utils.py
index 8501603..ee20704 100644
--- a/utils/password_utils.py
+++ b/utils/password_utils.py
@@ -5,6 +5,7 @@ class PasswordMixin:
     """
     Password mixin class
     """
+
     password_hash = None

     def __init__(self, passwd: str):
diff --git a/web_flask/clinical_system.py b/web_flask/clinical_system.py
index 8e867f4..e1d2479 100644
--- a/web_flask/clinical_system.py
+++ b/web_flask/clinical_system.py
@@ -16,6 +16,8 @@ def make_shell_context():
         "Appointment": m.Appointment,
         "Department": m.Department,
         "TimeSlot": m.TimeSlot,
-        'sa': sa,
-        'so': so
+        "WorkingHours": m.WorkingHours,
+        "AppointmentStatus": m.AppointmentStatus,
+        "sa": sa,
+        "so": so,
     }
diff --git a/web_flask/email.py b/web_flask/email.py
index 4707b6d..7d1d345 100644
--- a/web_flask/email.py
+++ b/web_flask/email.py
@@ -18,10 +18,10 @@ def send_email(subject, sender, recipients, text_body, html_body):

 def send_password_reset_email(user):
     token = user.get_reset_password_token()
-    send_email('[Raseel] Reset Your Password',
-               sender=app.config['MAIL_DEFAULT_SENDER'],
-               recipients=[user.email],
-               text_body=render_template('email/reset_password.txt',
-                                         user=user, token=token),
-               html_body=render_template('email/reset_password.html',
-                                         user=user, token=token))
+    send_email(
+        "[Raseel] Reset Your Password",
+        sender=app.config["MAIL_DEFAULT_SENDER"],
+        recipients=[user.email],
+        text_body=render_template("email/reset_password.txt", user=user, token=token),
+        html_body=render_template("email/reset_password.html", user=user, token=token),
+    )
diff --git a/web_flask/errors.py b/web_flask/errors.py
index 2610ae2..ce945b2 100644
--- a/web_flask/errors.py
+++ b/web_flask/errors.py
@@ -4,12 +4,12 @@ from web_flask import app, db

 @app.errorhandler(404)
 def page_not_found(error):
-    flash('Page not found', 'danger')
-    return render_template('404.html'), 404
+    flash("Page not found", "danger")
+    return render_template("404.html"), 404


 @app.errorhandler(500)
 def server_error(error):
-    flash('An unexpected error has occured', 'danger')
+    flash("An unexpected error has occured", "danger")
     db.session.rollback()
-    return render_template('500.html'), 500
+    return render_template("500.html"), 500
diff --git a/web_flask/forms.py b/web_flask/forms.py
index 447b93b..3c51f3a 100644
--- a/web_flask/forms.py
+++ b/web_flask/forms.py
@@ -1,9 +1,21 @@
 from flask_wtf import FlaskForm
-from wtforms import StringField, SubmitField, PasswordField, \
-    BooleanField, TextAreaField, DateField
-
-from wtforms.validators import DataRequired, Email, Length, Regexp, \
-    EqualTo, ValidationError
+from wtforms import (
+    StringField,
+    SubmitField,
+    PasswordField,
+    BooleanField,
+    TextAreaField,
+    DateField,
+)
+
+from wtforms.validators import (
+    DataRequired,
+    Email,
+    Length,
+    Regexp,
+    EqualTo,
+    ValidationError,
+)
 from web_flask import db
 import sqlalchemy as sa
 import models as m
@@ -19,25 +31,31 @@ class LoginForm(FlaskForm):
 class RegistrationForm(FlaskForm):
     name = StringField("Name", validators=[DataRequired()])
     email = StringField("Email", validators=[DataRequired(), Email()])
-    contact_number = StringField("Contact Number", validators=[
-        DataRequired(),
-        Length(10, message="Contact number must be 10 digits"),
-        Regexp(r'^05[0-9]{8}$',
-               message=(
-                   "Ensure contact"
-                   " number in the following format: 05XXXXXXXX"
-                )
-               )
-        ])
+    contact_number = StringField(
+        "Contact Number",
+        validators=[
+            DataRequired(),
+            Length(10, message="Contact number must be 10 digits"),
+            Regexp(
+                r"^05[0-9]{8}$",
+                message=(
+                    "Ensure contact" " number in the following format: 05XXXXXXXX"
+                ),
+            ),
+        ],
+    )

     birth_date = DateField("Birth Date", validators=[DataRequired()])

     password = PasswordField("Password", validators=[DataRequired()])

-    confirm_password = PasswordField("Repeat Password", validators=[
-        DataRequired(),
-        EqualTo('password', message="Passwords must match")
-        ])
+    confirm_password = PasswordField(
+        "Repeat Password",
+        validators=[
+            DataRequired(),
+            EqualTo("password", message="Passwords must match"),
+        ],
+    )
     submit = SubmitField("Register")

     # Will be called by WTForms
@@ -51,8 +69,7 @@ class RegistrationForm(FlaskForm):

     def validate_contact_number(self, contact_number):
         user = db.session.scalar(
-            sa.select(m.Patient).where(
-                m.Patient.contact_number == contact_number.data)
+            sa.select(m.Patient).where(m.Patient.contact_number == contact_number.data)
         )
         if user is not None:
             raise ValidationError("Please use a different contact number.")
@@ -61,26 +78,30 @@ class RegistrationForm(FlaskForm):
 class EditProfileInfo(FlaskForm):
     name = StringField("Name", validators=[DataRequired()])
     email = StringField("Email", validators=[DataRequired(), Email()])
-    contact_number = StringField("Contact Number", validators=[
-        DataRequired(),
-        Length(10, message="Contact number must be 10 digits"),
-        Regexp(r'^05[0-9]{8}$',
-               message=(
-                    "Ensure contact number in "
-                    "the following format: 05XXXXXXXX"
-                   )
-               )
-        ])
+    contact_number = StringField(
+        "Contact Number",
+        validators=[
+            DataRequired(),
+            Length(10, message="Contact number must be 10 digits"),
+            Regexp(
+                r"^05[0-9]{8}$",
+                message=(
+                    "Ensure contact number in " "the following format: 05XXXXXXXX"
+                ),
+            ),
+        ],
+    )
     birth_date = DateField("Birth Date", validators=[DataRequired()])
-    address = TextAreaField('Address', validators=[Length(min=0, max=256)])
-    medical_history = TextAreaField('Medical History',
-                                    validators=[Length(min=0, max=400)])
-    current_medications = TextAreaField('Current Medication',
-                                        validators=[Length(min=0, max=256)])
+    address = TextAreaField("Address", validators=[Length(min=0, max=256)])
+    medical_history = TextAreaField(
+        "Medical History", validators=[Length(min=0, max=400)]
+    )
+    current_medications = TextAreaField(
+        "Current Medication", validators=[Length(min=0, max=256)]
+    )
     submit = SubmitField("Update")

-    def __init__(self, original_email, original_contact_number,
-                 *args, **kwargs):
+    def __init__(self, original_email, original_contact_number, *args, **kwargs):
         super().__init__(*args, **kwargs)
         self.original_email = original_email
         self.original_contact_number = original_contact_number
@@ -97,19 +118,21 @@ class EditProfileInfo(FlaskForm):
         if self.original_contact_number != contact_number.data:
             user = db.session.scalar(
                 sa.select(m.Patient).where(
-                    m.Patient.contact_number == contact_number.data)
+                    m.Patient.contact_number == contact_number.data
+                )
             )
             if user is not None:
                 raise ValidationError("Please use a different contact number.")


 class ResetPasswordRequestForm(FlaskForm):
-    email = StringField('Email', validators=[DataRequired(), Email()])
-    submit = SubmitField('Send Request')
+    email = StringField("Email", validators=[DataRequired(), Email()])
+    submit = SubmitField("Send Request")


 class ResetPasswordForm(FlaskForm):
-    password = PasswordField('Password', validators=[DataRequired()])
+    password = PasswordField("Password", validators=[DataRequired()])
     confirm_password = PasswordField(
-        'Repeat Password', validators=[DataRequired(), EqualTo('password')])
-    submit = SubmitField('Reset Password')
+        "Repeat Password", validators=[DataRequired(), EqualTo("password")]
+    )
+    submit = SubmitField("Reset Password")
diff --git a/web_flask/routes.py b/web_flask/routes.py
index 78ffd79..3647669 100644
--- a/web_flask/routes.py
+++ b/web_flask/routes.py
@@ -4,34 +4,38 @@ from flask_login import login_user, current_user, logout_user, login_required
 from urllib.parse import urlsplit
 from web_flask import app, db
 from web_flask.email import send_password_reset_email
-from web_flask.forms import LoginForm, RegistrationForm, EditProfileInfo, \
-    ResetPasswordForm, ResetPasswordRequestForm
+from web_flask.forms import (
+    LoginForm,
+    RegistrationForm,
+    EditProfileInfo,
+    ResetPasswordForm,
+    ResetPasswordRequestForm,
+)
 import sqlalchemy as sa


-@app.route('/logout')
+@app.route("/logout")
 def logout():
     logout_user()
-    return redirect(url_for('index'))
+    return redirect(url_for("index"))


 @app.route("/login", methods=["GET", "POST"])
 def login():
     if current_user.is_authenticated:
-        return redirect(url_for('edit_profile'))
+        return redirect(url_for("edit_profile"))
     form = LoginForm()
     if form.validate_on_submit():
         patient = db.session.scalar(
             sa.select(m.Patient).where(m.Patient.email == form.email.data)
         )
         if patient is None or not patient.check_password(form.password.data):
-            flash('Login Unsuccessful. Please check email and password',
-                  'danger')
+            flash("Login Unsuccessful. Please check email and password", "danger")
             return redirect(url_for("login"))
         login_user(patient, remember=form.remember.data)
-        next_page = request.args.get('next')
-        if not next_page or urlsplit(next_page).netloc != '':
-            next_page = url_for('edit_profile')
+        next_page = request.args.get("next")
+        if not next_page or urlsplit(next_page).netloc != "":
+            next_page = url_for("edit_profile")
         return redirect(next_page)
     return render_template("login.html", title="Login - Raseel", form=form)

@@ -41,29 +45,25 @@ def index():
     return render_template("index.html", title="Home - Raseel")


-@app.route('/register', methods=['GET', 'POST'])
+@app.route("/register", methods=["GET", "POST"])
 def register():
     if current_user.is_authenticated:
-        return redirect(url_for('edit_profile'))
+        return redirect(url_for("edit_profile"))
     form = RegistrationForm()
     if form.validate_on_submit():
         patient_data = {
             "name": form.name.data,
             "email": form.email.data,
             "contact_number": form.contact_number.data,
-            "password": form.password.data
+            "password": form.password.data,
+            "birth_date": form.birth_date.data,
         }
         patient = m.Patient(**patient_data)
         db.session.add(patient)
         db.session.commit()
-        flash('Your account has been created! You are now able to log in',
-              'success')
-        return redirect(url_for('login'))
-    return render_template(
-                           'register.html',
-                           title='Register - Raseel',
-                           form=form
-                                    )
+        flash("Your account has been created! You are now able to log in", "success")
+        return redirect(url_for("login"))
+    return render_template("register.html", title="Register - Raseel", form=form)


 @app.route("/about")
@@ -79,7 +79,7 @@ def before_request():
         db.session.commit()


-@app.route('/edit_profile', methods=['GET', 'POST'])
+@app.route("/edit_profile", methods=["GET", "POST"])
 @login_required
 def edit_profile():
     form = EditProfileInfo(current_user.email, current_user.contact_number)
@@ -92,9 +92,9 @@ def edit_profile():
         current_user.current_medications = form.current_medications.data
         current_user.birth_date = form.birth_date.data
         db.session.commit()
-        flash('Your changes have been saved', 'success')
-        return redirect(url_for('edit_profile'))
-    elif request.method == 'GET':
+        flash("Your changes have been saved", "success")
+        return redirect(url_for("edit_profile"))
+    elif request.method == "GET":
         form.name.data = current_user.name
         form.email.data = current_user.email
         form.contact_number.data = current_user.contact_number
@@ -102,14 +102,13 @@ def edit_profile():
         form.medical_history.data = current_user.medical_history
         form.current_medications.data = current_user.current_medications
         form.birth_date.data = current_user.birth_date
-    return render_template('edit_profile.html', title='Edit Profile',
-                           form=form)
+    return render_template("edit_profile.html", title="Edit Profile", form=form)


-@app.route('/reset_password_request', methods=['GET', 'POST'])
+@app.route("/reset_password_request", methods=["GET", "POST"])
 def reset_password_request():
     if current_user.is_authenticated:
-        return redirect(url_for('edit_profile'))
+        return redirect(url_for("edit_profile"))
     form = ResetPasswordRequestForm()
     if form.validate_on_submit():
         patient = db.session.scalar(
@@ -117,25 +116,26 @@ def reset_password_request():
         )
         if patient:
             send_password_reset_email(patient)
-        flash(('An email has been sent with instructions to'
-               ' reset your password'),
-              'info')
-        return redirect(url_for('login'))
-    return render_template('reset_password.html', title='Reset Password',
-                           form=form)
+        flash(
+            ("An email has been sent with instructions to"
+             " reset your password"),
+            "info",
+        )
+        return redirect(url_for("login"))
+    return render_template("reset_password.html", title="Reset Password", heading="Reset Password", form=form)


-@app.route('/reset_password/<token>', methods=['GET', 'POST'])
+@app.route("/reset_password/<token>", methods=["GET", "POST"])
 def reset_password(token):
     if current_user.is_authenticated:
-        return redirect(url_for('edit_profile'))
+        return redirect(url_for("edit_profile"))
     patient = m.Patient.verify_reset_password_token(token)
     if not patient:
-        return redirect(url_for('index'))
+        return redirect(url_for("index"))
     form = ResetPasswordForm()
     if form.validate_on_submit():
         patient.set_password(form.password.data)
         db.session.commit()
-        flash('Your password has been reset.', 'success')
-        return redirect(url_for('login'))
-    return render_template('reset_password.html', form=form)
+        flash("Your password has been reset.", "success")
+        return redirect(url_for("login"))
+    return render_template("reset_password.html", title="Reset Password", heading="Reset Password", form=form)
diff --git a/web_flask/templates/base.html b/web_flask/templates/base.html
index faaac58..05d1f12 100644
--- a/web_flask/templates/base.html
+++ b/web_flask/templates/base.html
@@ -20,5 +20,6 @@
         {% endblock content %}
         </div>
         <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
+        {{ moment.include_moment() }}
     </body>
 </html>
diff --git a/web_flask/templates/base_visitors.html b/web_flask/templates/base_visitors.html
index d28b957..2dd1995 100644
--- a/web_flask/templates/base_visitors.html
+++ b/web_flask/templates/base_visitors.html
@@ -39,4 +39,5 @@
             </div>
       </section>
       <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
+      {{ moment.include_moment() }}
 </html>
\ No newline at end of file
diff --git a/web_flask/templates/doctor/doctor_base.html b/web_flask/templates/doctor/doctor_base.html
index 9b5a424..c44e3f9 100644
--- a/web_flask/templates/doctor/doctor_base.html
+++ b/web_flask/templates/doctor/doctor_base.html
@@ -9,14 +9,15 @@
     </head>
     <body>
         <div class="container">
-            <header class="d-flex justify-content-center py-3">
+            <header class="d-flex  justify-content-center py-3">
               <ul class="nav nav-pills">
                 <li class="nav-item"><a href="{{ url_for('doctor_bp.current_appointments') }}" {% if request.endpoint == 'doctor_bp.current_appointments' %}class="nav-link active" aria-current="page"{% else %}class="nav-link"{% endif %}>Current Appointments</a></li>
                 <li class="nav-item"><a href="{{ url_for('doctor_bp.upcoming_appointments') }}" {% if request.endpoint == 'doctor_bp.upcoming_appointments' %}class="nav-link active" aria-current="page"{% else %}class="nav-link"{% endif %}>Upcoming Appointments</a></li>
               </ul>
             </header>
-          </div>
-          <hr>
+        </div>
+        <p class="ms-3 fw-bold lead text-center">{{ moment(current_time_utc).format('LLLL') }}</p>
+        <hr>
         {% block content %}
         {% endblock content %}
         <table class="table table-striped">
@@ -31,16 +32,19 @@
             <tbody>
                 {% for appointment in appointments %}
                     <tr>
-                        <td>{{ appointment.patient_name }}</td>
-                        <td>{{ appointment.date }}</td>
-                        <td>{{ appointment.time }}</td>
+                        <td>{{ appointment.patient.name }}</td>
+                        <td>{{ moment(appointment.appointment_time).format('LLLL') }}</td>
+                        <td>{{ moment(appointment.appointment_time).fromNow() }}</td>
                         <td>
-                            <a href="{{ url_for('update_appointment', appointment_id=appointment.id) }}" class="btn btn-primary">Update</a>
-                            <a href="{{ url_for('delete_appointment', appointment_id=appointment.id) }}" class="btn btn-danger">Delete</a>
+                            <a href="{{ url_for('doctor_bp.update_appointment', appointment_id=appointment.id) }}" class="btn btn-primary">Update</a>
+                            <a href="{{ url_for('doctor_bp.delete_appointment', appointment_id=appointment.id) }}" class="btn btn-danger">Delete</a>
+                            <a href="{{ url_for('doctor_bp.view_appointment', appointment_id=appointment.id) }}" class="btn btn-info">View</a>
+
                         </td>
                     </tr>
                 {% endfor %}
             </tbody>
         </table>
+        {{ moment.include_moment() }}
     </body>
 </html>
diff --git a/web_flask/templates/login.html b/web_flask/templates/login.html
index 9686291..ee6fd62 100644
--- a/web_flask/templates/login.html
+++ b/web_flask/templates/login.html
@@ -1,8 +1,11 @@
-{% extends "base.html" %}
-{% import "macros.html" as macro %}
-{% block content %}
-    <h1>Login</h1>
-    {{ macro.create_form(form) }}
-    <p>New User? <a href="{{ url_for('register') }}">Click To Register!</a></p>
-    <p>Forgot Password? <a href="{{ url_for('reset_password_request') }}">Click To Reset!</a></p>
-{% endblock content %}
+{% extends "centeredForms.html" %}
+{% block options %}
+    <div class="mt-3">
+    <p class="mb-1">
+        New User? <a href="{{ url_for('register') }}" class="text-decoration-none">Register Here!</a>
+    </p>
+    <p class="mb-0">
+        Forgot Password? <a href="{{ url_for('reset_password_request') }}" class="text-decoration-none">Reset Password</a>
+    </p>
+</div>
+{% endblock options %}
\ No newline at end of file
diff --git a/web_flask/templates/macros.html b/web_flask/templates/macros.html
index 0afb3e8..504878f 100644
--- a/web_flask/templates/macros.html
+++ b/web_flask/templates/macros.html
@@ -17,12 +17,13 @@
     {% endif %}
 {% endmacro %}

-{% macro create_form(form, action='', id='', method='POST', novalidate=False) %}
+{% macro create_form(form, class="", action='', id='', method='POST', novalidate=False) %}
     <form
         {% if action %}action="{{ action }}"{% endif %}
         {% if id %}id="{{ id }}"{% endif %}
         {% if novalidate %}novalidate{% endif %}
-        {% if method %}method="{{ method }}"{% endif %}>
+        {% if method %}method="{{ method }}"{% endif %}
+        {% if class %}class="{{ class }}"{% endif %}>
         {{ form.hidden_tag() }}
         {% for field, errors in form.errors.items() %}
             {% if form[field].widget.input_type == 'hidden' %}
@@ -39,5 +40,6 @@
                 {% set ns.first_field = false %}
             {% endif %}
         {% endfor %}
+
     </form>
 {% endmacro %}
diff --git a/web_flask/templates/register.html b/web_flask/templates/register.html
index da81ed1..14bf366 100644
--- a/web_flask/templates/register.html
+++ b/web_flask/templates/register.html
@@ -1,7 +1,6 @@
-{% extends "base.html" %}
-{% import "macros.html" as macro %}
-{% block content %}
-        <h1>Register</h1>
-        {{ macro.create_form(form) }}
-        <p>Already have an account? <a href="{{ url_for('login') }}">Click To Login!</a></p>
-{% endblock content %}
+{% extends "centeredForms.html" %}
+{% block options %}
+<div class="mt-3">
+    <p>Already have an account? <a href="{{ url_for('login') }}" class="text-decoration-none">Click To Login!</a></p>
+</div>
+{% endblock options %}
\ No newline at end of file
diff --git a/web_flask/templates/reset_password.html b/web_flask/templates/reset_password.html
index f1e4e31..9902ad8 100644
--- a/web_flask/templates/reset_password.html
+++ b/web_flask/templates/reset_password.html
@@ -1,6 +1 @@
-{% extends "base.html" %}
-{% import "macros.html" as macro %}
-{% block content %}
-    <h1>Reset Your Password</h1>
-    {{ macro.create_form(form) }}
-{% endblock content %}
\ No newline at end of file
+{% extends "centeredForms.html" %}
diff --git a/web_flask/templates/reset_password_request.html b/web_flask/templates/reset_password_request.html
deleted file mode 100644
index e21162b..0000000
--- a/web_flask/templates/reset_password_request.html
+++ /dev/null
@@ -1,6 +0,0 @@
-{% extends "base.html" %}
-{% import "macros.html" as macro %}
-{% block content %}
-    <h1>Reset Password</h1>
-    {{ macro.create_form(form) }}
-{% endblock content %}
\ No newline at end of file
