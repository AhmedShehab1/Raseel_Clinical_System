diff --git a/.gitigonore b/.gitigonore
index 2e44634..c15b2df 100644
--- a/.gitigonore
+++ b/.gitigonore
@@ -1,3 +1,4 @@
 __pycache__/
 *.py[cod]
 messages.pot
+.env
\ No newline at end of file
diff --git a/babel.cfg b/babel.cfg
index d323645..4e8063d 100644
--- a/babel.cfg
+++ b/babel.cfg
@@ -1,2 +1,5 @@
 [python: web_flask/**/*.py]
 [jinja2: web_flask/templates/**/*.html]
+[jinja2: web_flask/main/templates/**/*.html]
+[jinja2: web_flask/errors/templates/**/*.html]
+[jinja2: web_flask/auth/templates/**/*.html]
diff --git a/config.py b/config.py
index faa08ce..0bf77fc 100644
--- a/config.py
+++ b/config.py
@@ -1,7 +1,8 @@
 import os
+from dotenv import load_dotenv
 
 basedir = os.path.abspath(os.path.dirname(__file__))
-
+load_dotenv(os.path.join(basedir, ".env"))
 
 class Config:
     SECRET_KEY = (
@@ -13,22 +14,10 @@ class Config:
     ) or "sqlite:///" + os.path.join(basedir, "app.db")
     SQL_ALCHEMY_TRACK_MODIFICATIONS = False
     MAIL_SERVER = os.environ.get("MAIL_SERVER")
-    MAIL_PORT = int(os.environ.get("MAIL_PORT") or 25)
+    MAIL_PORT = int(os.environ.get("MAIL_PORT")) or 25
     MAIL_USE_TLS = os.environ.get("MAIL_USE_TLS") is not None
     MAIL_USERNAME = os.environ.get("MAIL_USERNAME")
     MAIL_PASSWORD = os.environ.get("MAIL_PASSWORD")
     MAIL_DEFAULT_SENDER = os.environ.get("MAIL_DEFAULT_SENDER")
     ADMINS = ["ahmedshehab2006a@gmail.com", "mazenatef5510@gmail.com"]
     LANGUAGES = ["en", "ar"]
-
-
-class TestConfig(Config):
-    TESTING = True
-    SQLALCHEMY_DATABASE_URI = "sqlite:///test.db"
-    WTF_CSRF_ENABLED = False
-    MAIL_SERVER = None
-    MAIL_PORT = None
-    MAIL_USERNAME = None
-    MAIL_PASSWORD = None
-    MAIL_DEFAULT_SENDER = None
-    ADMINS = []
diff --git a/instance/test.db b/instance/test.db
index cfe4f94..21b48ab 100644
Binary files a/instance/test.db and b/instance/test.db differ
diff --git a/models/appointments.py b/models/appointments.py
index 9c6ba0f..7a7afe2 100644
--- a/models/appointments.py
+++ b/models/appointments.py
@@ -16,14 +16,14 @@ class Appointment(BaseModel):
     Appointment model class
     """
 
-    __tablename__ = "appointments"
+    __tablename__ = "current_appointments"
     patient_id: so.Mapped[str] = so.mapped_column(
         sa.ForeignKey("patients.id"), index=True
     )
     doctor_id: so.Mapped[str] = so.mapped_column(
         sa.ForeignKey("doctors.id"), index=True
     )
-    appointment_time: so.Mapped[sa.DateTime] = so.mapped_column(
+    current_appointment_time: so.Mapped[sa.DateTime] = so.mapped_column(
         sa.DateTime, index=True, nullable=False
     )
     status: so.Mapped[AppointmentStatus] = so.mapped_column(
@@ -32,8 +32,8 @@ class Appointment(BaseModel):
     reason: so.Mapped[str] = so.mapped_column(sa.String(256))
     notes: so.Mapped[str] = so.mapped_column(sa.String(256))
     patient: so.Mapped["m.Patient"] = so.relationship(
-        "Patient", back_populates="appointments"
+        "Patient", back_populates="current_appointments"
     )
     doctor: so.Mapped["m.Doctor"] = so.relationship(
-        "Doctor", back_populates="appointments"
+        "Doctor", back_populates="current_appointments"
     )
diff --git a/models/doctor.py b/models/doctor.py
index 1de335e..f831e4d 100644
--- a/models/doctor.py
+++ b/models/doctor.py
@@ -28,7 +28,7 @@ class Doctor(m.StaffMember):
     department: so.Mapped["m.Department"] = so.relationship(
         "Department", back_populates="doctors"
     )
-    appointments: so.Mapped[List["m.Appointment"]] = so.relationship(
+    current_appointments: so.Mapped[List["m.Appointment"]] = so.relationship(
         "Appointment", back_populates="doctor"
     )
     timeslots: so.Mapped[List["m.TimeSlot"]] = so.relationship(
diff --git a/models/patient.py b/models/patient.py
index 74e7abe..647443b 100644
--- a/models/patient.py
+++ b/models/patient.py
@@ -7,10 +7,10 @@ import sqlalchemy.orm as so
 from utils import PasswordMixin
 from flask_login import UserMixin
 import jwt
-from web_flask import app, db
+from web_flask import db
 from sqlalchemy.ext.hybrid import hybrid_property
 from datetime import date
-
+from flask import current_app
 
 class Patient(BaseModel, PasswordMixin, UserMixin):
     """
@@ -32,14 +32,14 @@ class Patient(BaseModel, PasswordMixin, UserMixin):
     def get_reset_password_token(self, expires_in=600):
         return jwt.encode(
             {"reset_password": self.id, "exp": time() + expires_in},
-            app.config["SECRET_KEY"],
+            current_app.config["SECRET_KEY"],
             algorithm="HS256",
         )
 
     @staticmethod
     def verify_reset_password_token(token):
         try:
-            id = jwt.decode(token, app.config["SECRET_KEY"],
+            id = jwt.decode(token, current_app.config["SECRET_KEY"],
                             algorithms=["HS256"])[
                 "reset_password"
             ]
@@ -74,7 +74,7 @@ class Patient(BaseModel, PasswordMixin, UserMixin):
     department: so.Mapped["m.Department"] = so.relationship(
         "Department", back_populates="patients"
     )
-    appointments: so.Mapped[List["m.Appointment"]] = so.relationship(
+    current_appointments: so.Mapped[List["m.Appointment"]] = so.relationship(
         "Appointment", back_populates="patient"
     )
 
diff --git a/tests/__init__.py b/tests/__init__.py
index e69de29..d5a5d62 100644
--- a/tests/__init__.py
+++ b/tests/__init__.py
@@ -0,0 +1,12 @@
+from config import Config
+
+class TestConfig(Config):
+    TESTING = True
+    SQLALCHEMY_DATABASE_URI = "sqlite://" # In-memory database
+    WTF_CSRF_ENABLED = False
+    MAIL_SERVER = None
+    MAIL_PORT = None
+    MAIL_USERNAME = None
+    MAIL_PASSWORD = None
+    MAIL_DEFAULT_SENDER = None
+    ADMINS = []
\ No newline at end of file
diff --git a/tests/test_models/test_engine/test_models/test_engine/__init__.py b/tests/test_models/test_engine/test_models/test_engine/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/tests/test_models/test_engine/tests/test_models/test_engine/__init__.py b/tests/test_models/test_engine/tests/test_models/test_engine/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/web_flask/__init__.py b/web_flask/__init__.py
index 556fdd0..b8d7483 100644
--- a/web_flask/__init__.py
+++ b/web_flask/__init__.py
@@ -2,86 +2,90 @@
 from flask import Flask
 from flask_mail import Mail
 from config import Config
-import pretty_errors
 from flask_sqlalchemy import SQLAlchemy
 from flask_migrate import Migrate
 from flask_login import LoginManager
-import logging
 from logging.handlers import SMTPHandler, RotatingFileHandler
 from flask_moment import Moment
-from flask import request
 from flask_babel import Babel, lazy_gettext as _l
+import logging
+import pretty_errors
 import os
 
 pretty_errors.activate()
 
-app = Flask(__name__)
-if os.getenv("FLASK_ENV") == "development":
-    app.config.from_object("config.TestConfig")
-else:
-    app.config.from_object(Config)
-
-
-mail = Mail(app)
-moment = Moment(app)
-db = SQLAlchemy(app)  # This is the database engine
-migrate = Migrate(app, db)  # This is the migration engine
+mail = Mail()
+moment = Moment()
+db = SQLAlchemy()  # This is the database engine
+migrate = Migrate(db)  # This is the migration engine
+babel = Babel()
+login_manager = LoginManager()  # This is the login manager
+login_manager.login_view = "login"
+login_manager.login_message = _l("Please log in to access this page.")
 
 def get_locale():
-    return request.accept_languages.best_match(app.config['LANGUAGES'])
-
-from web_flask.main import bp as main_bp
-from web_flask.errors import bp as errors_bp
-from web_flask.doctor_bp import doctor_bp
-from web_flask.auth import bp as auth_bp
-app.register_blueprint(errors_bp)
-app.register_blueprint(doctor_bp)
-app.register_blueprint(auth_bp)
-app.register_blueprint(main_bp)
-
-
-
-
-babel = Babel(app, locale_selector=get_locale)
-
-if not app.debug:
-    if app.config["MAIL_SERVER"]:
-        auth = None
-        if app.config["MAIL_USERNAME"] or app.config["MAIL_PASSWORD"]:
-            auth = (app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
-        secure = None
-        if app.config["MAIL_USE_TLS"]:
-            secure = ()
-        mail_handler = SMTPHandler(
-            mailhost=(app.config["MAIL_SERVER"], app.config["MAIL_PORT"]),
-            fromaddr=app.config["MAIL_DEFAULT_SENDER"],
-            toaddrs=app.config["ADMINS"],
-            subject="Raseel Failure",
-            credentials=auth,
-            secure=secure,
+    # return request.accept_languages.best_match(current_app.config['LANGUAGES'])
+    return "ar"
+
+def create_app(config_class=Config):
+    app = Flask(__name__)
+    app.config.from_object(config_class)
+
+    db.init_app(app)
+    migrate.init_app(app, db)
+    mail.init_app(app)
+    moment.init_app(app)
+    babel.init_app(app, locale_selector=get_locale)
+    login_manager.init_app(app)
+    babel.init_app(app)
+
+    from web_flask.main import bp as main_bp
+    from web_flask.errors import bp as errors_bp
+    from web_flask.doctor_bp import doctor_bp
+    from web_flask.auth import bp as auth_bp
+    from web_flask.cli import bp as cli_bp
+    app.register_blueprint(errors_bp)
+    app.register_blueprint(doctor_bp)
+    app.register_blueprint(auth_bp)
+    app.register_blueprint(main_bp)
+    app.register_blueprint(cli_bp)
+
+    if not app.debug and not app.testing:
+        if app.config["MAIL_SERVER"]:
+            auth = None
+            if app.config["MAIL_USERNAME"] or app.config["MAIL_PASSWORD"]:
+                auth = (app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
+            secure = None
+            if app.config["MAIL_USE_TLS"]:
+                secure = ()
+            mail_handler = SMTPHandler(
+                mailhost=(app.config["MAIL_SERVER"], app.config["MAIL_PORT"]),
+                fromaddr=app.config["MAIL_DEFAULT_SENDER"],
+                toaddrs=app.config["ADMINS"],
+                subject="Raseel Failure",
+                credentials=auth,
+                secure=secure,
+            )
+            mail_handler.setLevel(logging.ERROR)
+            app.logger.addHandler(mail_handler)
+        if not os.path.exists("logs"):
+            os.mkdir("logs")
+        file_handler = RotatingFileHandler(
+            "logs/raseel.log", maxBytes=10240, backupCount=10
         )
-        mail_handler.setLevel(logging.ERROR)
-        app.logger.addHandler(mail_handler)
-    if not os.path.exists("logs"):
-        os.mkdir("logs")
-    file_handler = RotatingFileHandler(
-        "logs/raseel.log", maxBytes=10240, backupCount=10
-    )
-    file_handler.setFormatter(
-        logging.Formatter(
-            "%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]"
+        file_handler.setFormatter(
+            logging.Formatter(
+                "%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]"
+            )
         )
-    )
-    file_handler.setLevel(logging.INFO)
-    app.logger.addHandler(file_handler)
+        file_handler.setLevel(logging.INFO)
+        app.logger.addHandler(file_handler)
 
-    app.logger.setLevel(logging.INFO)
-    app.logger.info("Raseel startup")
+        app.logger.setLevel(logging.INFO)
+        app.logger.info("Raseel startup")
+
+    return app
 
-login_manager = LoginManager()  # This is the login manager
-login_manager.init_app(app)
-login_manager.login_view = "login"
-login_manager.login_message = _l("Please log in to access this page.")
 
 from models.base_model import BaseModel
 import models as m
diff --git a/web_flask/auth/email.py b/web_flask/auth/email.py
index f6ba2ff..00fab84 100644
--- a/web_flask/auth/email.py
+++ b/web_flask/auth/email.py
@@ -1,5 +1,5 @@
-from flask import render_template
-from web_flask import app, mail
+from flask import render_template, current_app
+from web_flask import mail
 from flask_mail import Message
 from threading import Thread
 
@@ -13,7 +13,7 @@ def send_email(subject, sender, recipients, text_body, html_body):
     msg = Message(subject, sender=sender, recipients=recipients)
     msg.body = text_body
     msg.html = html_body
-    Thread(target=send_email_async, args=(app, msg)).start()
+    Thread(target=send_email_async, args=(current_app._get_current_object(), msg)).start()
 
 
 def send_password_reset_email(user):
diff --git a/web_flask/auth/routes.py b/web_flask/auth/routes.py
index 5dea053..c8da6fe 100644
--- a/web_flask/auth/routes.py
+++ b/web_flask/auth/routes.py
@@ -12,7 +12,7 @@ import models as m
 @bp.route("/logout")
 def logout():
     logout_user()
-    return redirect(url_for("index"))
+    return redirect(url_for("main.index"))
 
 
 @bp.route("/login", methods=["GET", "POST"])
@@ -84,7 +84,7 @@ def reset_password(token):
         return redirect(url_for("main.edit_profile"))
     patient = m.Patient.verify_reset_password_token(token)
     if not patient:
-        return redirect(url_for("index"))
+        return redirect(url_for("main.index"))
     form = ResetPasswordForm()
     if form.validate_on_submit():
         patient.set_password(form.password.data)
diff --git a/web_flask/auth/templates/login.html b/web_flask/auth/templates/login.html
index 740b104..68469e2 100644
--- a/web_flask/auth/templates/login.html
+++ b/web_flask/auth/templates/login.html
@@ -2,10 +2,10 @@
 {% block options %}
     <div class="mt-3">
     <p class="mb-1">
-        New User? <a href="{{ url_for('auth.register') }}" class="text-decoration-none">Register Here!</a>
+        {{ _('New User?') }}<a href="{{ url_for('auth.register') }}" class="text-decoration-none">{{ _('Register Here!') }}</a>
     </p>
     <p class="mb-0">
-        Forgot Password? <a href="{{ url_for('auth.reset_password_request') }}" class="text-decoration-none">Reset Password</a>
+        {{ _('Forgot Password?') }} <a href="{{ url_for('auth.reset_password_request') }}" class="text-decoration-none">{{ _('Reset Password') }}</a>
     </p>
     </div>
 {% endblock options %}
diff --git a/web_flask/cli.py b/web_flask/cli.py
index 2041ce5..e01e879 100644
--- a/web_flask/cli.py
+++ b/web_flask/cli.py
@@ -1,8 +1,10 @@
 import os
 import click
-from web_flask import app
+from flask import Blueprint
 
-@app.cli.group()
+bp = Blueprint('cli', __name__, cli_group=None)
+
+@bp.cli.group()
 def translate():
     """Translation and Localization Commands"""
     pass
diff --git a/web_flask/clinical_system.py b/web_flask/clinical_system.py
index 8ac5ea7..02abe09 100644
--- a/web_flask/clinical_system.py
+++ b/web_flask/clinical_system.py
@@ -1,15 +1,15 @@
 # flake8: noqa
-from web_flask import app, db
+from web_flask import db, create_app
 from models.base_model import BaseModel
-from web_flask import cli
 import models as m
 import sqlalchemy as sa
 import sqlalchemy.orm as so
 
+app = create_app()
+
 @app.shell_context_processor
 def make_shell_context():
     return {
-        "app": app,
         "db": db,
         "BaseModel": BaseModel,
         "Patient": m.Patient,
diff --git a/web_flask/translations/ar/LC_MESSAGES/messages.mo b/web_flask/translations/ar/LC_MESSAGES/messages.mo
index ce538f1..981e699 100644
Binary files a/web_flask/translations/ar/LC_MESSAGES/messages.mo and b/web_flask/translations/ar/LC_MESSAGES/messages.mo differ
diff --git a/web_flask/translations/ar/LC_MESSAGES/messages.po b/web_flask/translations/ar/LC_MESSAGES/messages.po
index 14b3730..6e3a66a 100644
--- a/web_flask/translations/ar/LC_MESSAGES/messages.po
+++ b/web_flask/translations/ar/LC_MESSAGES/messages.po
@@ -7,27 +7,44 @@ msgid ""
 msgstr ""
 "Project-Id-Version: PROJECT VERSION\n"
 "Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
-"POT-Creation-Date: 2024-08-29 14:32+0300\n"
-"PO-Revision-Date: 2024-08-29 14:29+0300\n"
+"POT-Creation-Date: 2024-08-29 22:31+0300\n"
+"PO-Revision-Date: 2024-08-29 22:32+0300\n"
 "Last-Translator: \n"
-"Language: ar\n"
 "Language-Team: ar <LL@li.org>\n"
-"Plural-Forms: nplurals=6; plural=(n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : "
-"n%100>=3 && n%100<=10 ? 3 : n%100>=0 && n%100<=2 ? 4 : 5);\n"
+"Language: ar\n"
 "MIME-Version: 1.0\n"
 "Content-Type: text/plain; charset=utf-8\n"
 "Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=6; plural=(n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : "
+"n%100>=3 && n%100<=10 ? 3 : n%100>=0 && n%100<=2 ? 4 : 5);\n"
 "Generated-By: Babel 2.16.0\n"
+"X-Generator: Poedit 3.4.4\n"
 
-#: web_flask/__init__.py:76
+#: web_flask/__init__.py:24
 msgid "Please log in to access this page."
 msgstr "للوصول الى هذه الصفحة يرجى تسجيل الدخول."
 
-#: web_flask/errors.py:7
+#: web_flask/auth/templates/login.html:5
+msgid "New User?"
+msgstr "عضو جديد ؟"
+
+#: web_flask/auth/templates/login.html:5
+msgid "Register Here!"
+msgstr "سجل هنا!"
+
+#: web_flask/auth/templates/login.html:8
+msgid "Forgot Password?"
+msgstr "هل نسيت كلمة السر؟"
+
+#: web_flask/auth/templates/login.html:8
+msgid "Reset Password"
+msgstr "إعادة تعيين كلمة المرور"
+
+#: web_flask/errors/handlers.py:8
 msgid "Page not found"
 msgstr "لم يتم العثور على الصفحة"
 
-#: web_flask/errors.py:13
+#: web_flask/errors/handlers.py:14
 msgid "An unexpected error has occured"
 msgstr "حدث خطأ غير متوقع"
 
@@ -101,17 +118,17 @@ msgstr "مركز رسيل للرعاية الطبية"
 msgid ""
 "Welcome to Raseel Medical Care Center At Raseel Medical Care Center, we "
 "are dedicated to providing exceptional healthcare services tailored to "
-"your needs. Our team of experienced medical professionals is committed to"
-" ensuring the highest standards of care in a compassionate and welcoming "
-"environment. Whether you are visiting for a routine check-up or "
-"specialized treatment we are here to support your health journey every "
-"step of the way."
+"your needs. Our team of experienced medical professionals is committed "
+"to ensuring the highest standards of care in a compassionate and "
+"welcoming environment. Whether you are visiting for a routine check-up "
+"or specialized treatment we are here to support your health journey "
+"every step of the way."
 msgstr ""
 "مرحباً بك في مركز رسيل للرعاية الطبية في مركز رسيل للرعاية الطبية، نحن "
 "ملتزمون بتقديم خدمات رعاية صحية استثنائية مصممة خصيصاً لتلبية احتياجاتك. "
 "يلتزم فريقنا من المهنيين الطبيين ذوي الخبرة بضمان توفير أعلى معايير "
-"الرعاية في بيئة تتسم بالرحمة والترحاب. سواءً كنت تزورنا لإجراء فحص روتيني"
-" أو علاج متخصص، فنحن هنا لدعم رحلتك الصحية في كل خطوة من خطواتها."
+"الرعاية في بيئة تتسم بالرحمة والترحاب. سواءً كنت تزورنا لإجراء فحص روتيني "
+"أو علاج متخصص، فنحن هنا لدعم رحلتك الصحية في كل خطوة من خطواتها."
 
 #: web_flask/templates/index.html:9
 msgid "View Services"
@@ -131,12 +148,12 @@ msgid ""
 "services through a clinical web-based system. We prioritize accessible "
 "and quality healthcare, ensuring that every patient receives the care "
 "they need. Our dedicated team of professionals is committed to improving "
-"health outcomes and enhancing patient satisfaction. Experience healthcare"
-" like never before with Raseel Medical Care Center, where your health is "
-"our mission."
+"health outcomes and enhancing patient satisfaction. Experience "
+"healthcare like never before with Raseel Medical Care Center, where your "
+"health is our mission."
 msgstr ""
-"يقدم مركز رسيل للرعاية الطبية في الرياض خدمات طبية شاملة من خلال نظام طبي"
-" قائم على شبكة الإنترنت. نحن نعطي الأولوية للرعاية الصحية التي يسهل "
+"يقدم مركز رسيل للرعاية الطبية في الرياض خدمات طبية شاملة من خلال نظام "
+"طبي قائم على شبكة الإنترنت. نحن نعطي الأولوية للرعاية الصحية التي يسهل "
 "الوصول إليها وذات الجودة العالية، مما يضمن حصول كل مريض على الرعاية التي "
 "يحتاجها. يلتزم فريقنا المتفاني من المتخصصين بتحسين النتائج الصحية وتعزيز "
 "رضا المرضى. اختبر الرعاية الصحية بشكل لم يسبق له مثيل مع مركز رسيل "
@@ -168,4 +185,3 @@ msgstr ""
 #, python-format
 msgid "%(time_from_now)s"
 msgstr ""
-
